TASK 7

https://www.opsramp.com/guides/prometheus-monitoring/prometheus-node-exporter/
https://spacelift.io/blog/kube-state-metrics

https://blog.devops.dev/part-1-setup-prometheus-kube-state-metrics-and-integrate-grafana-with-kubernetes-6c21f60d167f
https://blog.devops.dev/part-2-setup-prometheus-kube-state-metrics-and-integrate-grafana-with-kubernetes-4a91bf5bee29

https://victoriametrics.com/blog/alerting-recording-rules-alertmanager/

https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/
https://prometheus.io/docs/alerting/latest/overview/
https://prometheus.io/docs/alerting/latest/configuration/
https://github.com/prometheus/alertmanager/blob/main/doc/examples/simple.yml
https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config
https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/
https://prometheus.io/docs/alerting/latest/alertmanager/

https://www.opsramp.com/guides/prometheus-monitoring/prometheus-alerting/
https://monitoring.mixins.dev/prometheus/
https://monitoring.mixins.dev/alertmanager/
https://monitoring.mixins.dev/node-exporter/
https://monitoring.mixins.dev/kube-state-metrics/
https://monitoring.mixins.dev/kubernetes/
https://samber.github.io/awesome-prometheus-alerts/rules#prometheus-self-monitoring


# minikube addons enable ingress
# minikube addons enable registry
minikube addons enable metrics-server

minikube addons enable metrics-server

minikube ssh
#sudo mkdir -p /bitnami/alertmanager/data
#sudo mkdir -p /bitnami/prometheus/data
#sudo mkdir -p /bitnami/grafana/

#sudo mkdir -p /bitnami
#sudo chown -R 1001:1001 /bitnami

# kubectl create ns monitoring

# kubectl create secret generic datasource-secret -n monitoring --from-file=datasource-secret.yaml
# kubectl create configmap my-dashboard-1 -n monitoring --from-file=my-dashboard-1.json
# kubectl create configmap my-dashboard-2 -n monitoring --from-file=my-dashboard-2.json


terraform init
terraform validate
terraform plan
terraform apply

kubectl port-forward -n monitoring svc/prometheus-server 9090:9090
kubectl port-forward -n monitoring svc/grafana 3000:3000

echo "Password: $(kubectl get secret grafana-admin-password --namespace monitoring -o jsonpath="{.data.password}" | base64 -d)"

echo "Password: $(kubectl get secret grafana-admin --namespace monitoring -o jsonpath="{.data.GF_SECURITY_ADMIN_PASSWORD}" | base64 -d)"
echo "Password: $(kubectl get secret grafana-admin-password --namespace monitoring -o jsonpath="{.data.GF_SECURITY_ADMIN_PASSWORD}" | base64 -d)"

Example PromQL Expressions
The following PromQL expressions are example metrics and their meanings:

Metric

The per-second average amount of CPU time spent in system mode, over the last 10 minutes (seconds)
rate(node_cpu_seconds_total{mode="system"}[10m])	

Total filesystem space obtainable to users other than superuser (bytes)
node_filesystem_avail_bytes

The per-second average network traffic received, over the last 10 minutes (in bytes)
rate(node_network_receive_bytes_total[10m])

number of Pods currently scheduled to each Node in your Kubernetes cluster
sum(kube_pod_info) by (node)

number of ready pods in each namespace:
sum by (namespace) (kube_pod_status_ready)

Find pods that have restarted, including their namespaces:
sum(kube_pod_container_status_restarts_total) by (namespace, pod) > 0

Get the number of pod replicas available for each deployment in a specific namespace:
sum(kube_deployment_status_replicas_available{namespace="monitoring"}) by (deployment)

Check changes in a deploymentâ€™s replica count over the past 5 minutes:
kube_deployment_status_replicas_available{deployment="monitoring"}[5m]

List images and how many containers use them:
sum by (image) (kube_pod_container_info)

Get the last scheduled time for each CronJob in a namespace:
max(kube_cronjob_status_last_schedule_time{namespace="monitoring"}) by (cronjob)

Get the Persistent Volumes using a specific storage class:
count(kube_persistentvolume_info{storageclass="monitoring"}) by (persistentvolume)

Find how many pods have been created in a namespace in the past day:
count(increase(kube_pod_created{namespace="monitoring"}[1d]))

Get the top three namespaces with the most new pods created in the past day:
topk(3, count by (namespace) (increase(kube_pod_created[1d])))

Get the number of successful completions for each job in a namespace:
sum by (job_name) (kube_job_spec_completions{namespace="demo-namespace"})


According to my Grafana dashboard, the following metrics work nicely for alerting for available space,

100 - ((node_filesystem_avail_bytes{mountpoint="/",fstype!="rootfs"} * 100) / node_filesystem_size_bytes{mountpoint="/",fstype!="rootfs"})

The formula gives out the percentage of available space on the pointed disk. Make sure you include the mountpoint and fstype within the metrics.


________________________________________________

TO READ:

https://polarsquad.com/blog/check-your-helm-deployments
https://medium.com/geekculture/jenkins-pipeline-python-and-docker-altogether-442d38119484
https://rokpoto.com/jenkins-docker-in-docker-agent/
https://chrisharwell94.medium.com/options-available-for-health-checks-with-helm-charts-b139f26f70aa
https://www.sergiosanchez.com/posts/email-setup/
https://buildkite.com/resources/blog/automating-jenkins-with-jcasc-configuration-as-code/
https://medium.com/@aniecesedhai/generating-kubeconfig-automating-role-and-cluster-role-creation-rbac-with-helm-and-jenkins-bcd70b9934b9

https://artifacthub.io/packages/helm/jenkinsci/jenkins
https://github.com/jenkinsci/helm-charts/blob/main/charts/jenkins/values.yaml

https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/README.md
https://github.com/jenkinsci/configuration-as-code-plugin/blob/c3457b3933e66a27f913985bfa05da10f7f64b5f/docs/features/secrets.adoc#passing-secrets-through-variables

https://www.reddit.com/r/kubernetes/comments/1kfdh5i/jenkins_agent_on_kubernetes/
https://devopscube.com/jenkins-build-agents-kubernetes/
https://plugins.jenkins.io/kubernetes/

https://www.jenkins.io/doc/book/managing/nodes/
https://www.jenkins.io/doc/book/using/using-agents/
https://www.jenkins.io/doc/book/pipeline/jenkinsfile/
https://www.jenkins.io/doc/book/pipeline/getting-started/#snippet-generator
https://www.jenkins.io/doc/book/pipeline/pipeline-as-code/
https://www.jenkins.io/doc/book/pipeline/syntax/
https://www.jenkins.io/doc/pipeline/tour/tests-and-artifacts/

https://docs.sonarsource.com/sonarqube-cloud/enriching/test-coverage/python-test-coverage/
https://docs.sonarsource.com/sonarqube-server/latest/analyzing-source-code/scanners/sonarscanner/

https://devopscube.com/setup-jenkins-email-notification/

Sonar-runner installation
https://gist.github.com/freb97/01867bb2003b57d8178d9b0c2e38125a

Kaniko and docker-in-docker
https://devops.stackexchange.com/questions/15418/running-builds-requiring-docker-daemon-in-jenkins-installed-using-helm-and-runni
https://rokpoto.com/jenkins-docker-in-docker-agent/

https://www.reddit.com/r/docker/comments/tb1ln9/programmatically_get_the_image_sha_of_an_image_i/
https://www.reddit.com/r/kubernetes/comments/ca3cm3/how_to_get_kubeconfig_to_use_in_jenkins/

https://phati-sawant.medium.com/connect-to-a-kubernetes-cluster-and-execute-kubectl-commands-in-jenkins-pipeline-a3f474c1302f

https://github.com/mjah/kubernetes-jenkins-cicd-pipeline-example/blob/master/setup/get-kubeconfig.sh

https://github.com/calvinliphc/terraform-jenkins/tree/main/EKS/manage

TASK 6

minikube start --driver=virtualbox --cpus=8 --memory=8g

https://docs.sonarsource.com/sonarqube-cloud/enriching/test-coverage/python-test-coverage/

docker build -t lerkasan/jnlp-agent-python3:jdk21 ./jenkins/agents/jnlp-agent-python3/
docker push lerkasan/jnlp-agent-python3:jdk21

kubectl create ns dummy-flask-app

kubectl create secret generic dockerhub-credentials-secret \
  --from-file=.dockerconfigjson=/home/lerkasan/.docker/config.json \
  --type=kubernetes.io/dockerconfigjson \
  --namespace=dummy-flask-app

kubectl create secret generic jcasc-secrets --from-env-file=.env -n jenkins

kubectl create secret generic dockerhub-credentials-secret \
    --from-file=.dockerconfigjson=/home/lerkasan/.docker/config.json \
    --type=kubernetes.io/dockerconfigjson \
    --namespace=jenkins

kubectl create namespace dummy-flask-app

kubectl create secret generic dockerhub-credentials-secret \
    --from-file=.dockerconfigjson=/home/lerkasan/.docker/config.json \
    --type=kubernetes.io/dockerconfigjson \
    --namespace=dummy-flask-app

helm upgrade --install --create-namespace jenkins --namespace jenkins -f jenkins/manifests/jenkins-minikube-prep-for-helm-chart/jenkins-values.yaml jenkinsci/jenkins

kubectl port-forward -n dummy-flask-app svc/dummy-flask-app-dummy-flask-app 8000:8080

kubectl port-forward -n jenkins svc/jenkins 8080:8080

helm get values --namespace dummy-flask-app dummy-flask-app

!!! Don't forget to turn off Automatic Analysis in SonarQube project !!!
https://docs.sonarsource.com/sonarqube-cloud/enriching/test-coverage/python-test-coverage/

kubectl config view


curl http://dummy-flask-app-dummy-flask-app.dummy-flask-app.svc.cluster.local:8080
curl "${HELM_RELEASE_NAME}-$(yq -r .name ./chart/Chart.yaml).${APP_NAMESPACE}.svc.cluster.local:8080"

kubectl exec --namespace jenkins -it svc/jenkins -c jenkins -- /bin/cat /run/secrets/additional/chart-admin-password && echo

kubectl port-forward -n jenkins svc/jenkins 8080:8080

kubectl describe $(kubectl get all -n jenkins | grep python | awk '{print $1}') -n jenkins
kubectl logs $(kubectl get all -n jenkins | grep python | awk '{print $1}' | cut -d '/' -f 2) -n jenkins

kubectl exec -it pod/dind-agent-qnt4n -c jnlp -n jenkins -- /bin/sh
kubectl exec -it pod/dind-agent-qnt4n -c jnlp -n jenkins -- java -version

kubectl exec -it $(kubectl get all -n jenkins | grep python | awk '{print $1}') -c jnlp -n jenkins -- java -version
kubectl exec -it $(kubectl get all -n jenkins | grep python | awk '{print $1}') -n jenkins -- java -version

kubectl exec -it pod/jenkins-0 -c jenkins -n jenkins -- /bin/sh

docker run --rm --entrypoint="java -version" jenkins/jnlp-agent-python3
docker run --rm -it --entrypoint="/bin/sh" jenkins/jnlp-agent-python3


helm history dummy-flask-app -n dummy-flask-app
helm status dummy-flask-app -n dummy-flask-app


https://github.com/jenkinsci/email-ext-plugin/blob/main/src/test/resources/configuration-as-code.yml

unclassified:
  email-ext:
    defaultSuffix: "@domain.extension"
    addAccounts:
      - address: "foo.bar"
        smtpHost: "smtp-host"
        smtpPort: "1234"
        credentialsId: "credentials-id"
        useSsl: true
        useTls: true
        advProperties: "avd-properties"
    charset: "UTF-8"
    defaultContentType: "text/html"
    defaultSubject: "DEFAULT EMAIL SUBJECT"
    defaultBody: "DEFAULT BODY"
    emergencyReroute: "emergency-reroute"
    maxAttachmentSizeMb: 42
    mailAccount:
      smtpHost: "smtp-host-xyz"
      smtpPort: "9876"
      credentialsId: "smtp-credentials-xyz"
      advProperties: "adv-properties-xyz"
      useSsl: true
      useTls: true
    defaultRecipients: "first-account@domain.extension"
    allowedDomains: "@domain.extension"
    excludedCommitters: "not-this-committer"
    listId: "list-id"
    precedenceBulk: true
    defaultReplyTo: "no-reply@domain.extension"
    adminRequiredForTemplateTesting: true
    watchingEnabled: true
    allowUnregisteredEnabled: true
    defaultPresendScript: "default-presend-script"
    defaultPostsendScript: "defaultpostsend-script"
    defaultClasspath: []
    defaultTriggerIds: []
    debugMode: true





TASK 5

kubectl create namespace dummy-flask-app

kubectl create secret generic dockerhub-credentials-secret \
    --from-file=.dockerconfigjson=/home/lerkasan/.docker/config.json \
    --type=kubernetes.io/dockerconfigjson \
    --namespace=dummy-flask-app
    

helm lint ./flask_app/chart
helm template ./flask_app/chart
helm install -n dummy-flask-app -f ./flask_app/chart/values.yaml dummy-flask-app ./flask_app/chart
helm list

Option #1:
kubectl get nodes -o wide
http://node-internal-ip:node-port

Option #2
kubectl port-forward -n dummy-flask-app svc/dummy-flask-app-dummy-flask-app 8080:8080
http://localhost:8080

_________________________________________

ssh -i ../../ssh_keys/appserver_rsschool_ssh_key_pair.pem -o ProxyCommand="ssh -i ../../ssh_keys/bastion_rsschool_ssh_key_pair.pem -W %h:%p ubuntu@54.91.195.38" ubuntu@10.1.230.231

ssh tunnel for k3s api to use with kubectl on local machine:
ssh -i bastion_rsschool_ssh_key_pair.pem -L 6443:k3s_master_ip:6443 ubuntu@bastion_ip -N &
ssh -i bastion_rsschool_ssh_key_pair.pem -L 6443:10.1.240.251:6443 ubuntu@34.228.244.136 -N &
Add kubeconfig to ~/.kube/config on the local machine and inside this config replace k3s_master_ip with 127.0.0.1
Now run `kubectl get nodes` on local machine.

aws sts decode-authorization-message --encoded-message KDmmJmkLKm...iUtfAa --output text | jq '.'

tflint --minimum-failure-severity=notice --recursive --config $(pwd)/.tflint.hcl

curl -Is https://www.google.com || head -n 15

if nc -zw1 google.com 443; then
  echo "we have connectivity"
fi

kubectl describe pod jenkins-0
kubectl logs jenkins-0 -c config-reload-init -n jenkins
kubectl logs jenkins-0 -c init -n jenkins
https://kubernetes.io/docs/tasks/debug/debug-application/debug-init-containers/#accessing-logs-from-init-containers


TASK 4


helm repo add jenkinsci https://charts.jenkins.io
helm repo update
helm install jenkins -n jenkins -f jenkins-values.yaml jenkinsci/jenkins

helm uninstall jenkins -n jenkins

Get your 'admin' user password by running:

jsonpath="{.data.jenkins-admin-password}"
secret=$(kubectl get secret -n jenkins jenkins -o jsonpath=$jsonpath)
echo $(echo $secret | base64 --decode)



Get the Jenkins URL to visit by running these commands in the same shell:

jsonpath="{.spec.ports[0].nodePort}"
NODE_PORT=$(kubectl get -n jenkins -o jsonpath=$jsonpath services jenkins)
jsonpath="{.items[0].status.addresses[0].address}"
NODE_IP=$(kubectl get nodes -n jenkins -o jsonpath=$jsonpath)
echo http://$NODE_IP:$NODE_PORT/login



kubectl -n jenkins port-forward <pod_name> 8080:8080
Forwarding from 127.0.0.1:8080 -> 8080
Forwarding from [::1]:8080 -> 8080




NAME: jenkins
LAST DEPLOYED: Sat Jul  5 17:45:22 2025
NAMESPACE: jenkins
STATUS: deployed
REVISION: 1
NOTES:
1. Get your 'admin' user password by running:
  kubectl exec --namespace jenkins -it svc/jenkins -c jenkins -- /bin/cat /run/secrets/additional/chart-admin-password && echo
2. Get the Jenkins URL to visit by running these commands in the same shell:
  export NODE_PORT=$(kubectl get --namespace jenkins -o jsonpath="{.spec.ports[0].nodePort}" services jenkins)
  export NODE_IP=$(kubectl get nodes --namespace jenkins -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT

3. Login with the password from step 1 and the username: admin
4. Configure security realm and authorization strategy
5. Use Jenkins Configuration as Code by specifying configScripts in your values.yaml file, see documentation: http://$NODE_IP:$NODE_PORT/configuration-as-code and examples: https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos

For more information on running Jenkins on Kubernetes, visit:
https://cloud.google.com/solutions/jenkins-on-container-engine

For more information about Jenkins Configuration as Code, visit:
https://jenkins.io/projects/jcasc/


NOTE: Consider using a custom image with pre-installed plugins